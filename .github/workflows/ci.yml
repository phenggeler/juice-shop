name: "CI/CD Pipeline"
on:
  push:
    branches-ignore:
      - l10n_develop
      - gh-pages
    paths-ignore:
      - '*.md'
      - 'LICENSE'
    tags-ignore:
      - '*'
  pull_request:
    paths-ignore:
      - '*.md'
      - 'LICENSE'
      - 'data/static/i18n/*.json'
      - 'frontend/src/assets/i18n/*.json'
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@v2
      - name: "Use Node.js 14"
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: "Install CLI tools"
        run: npm install -g @angular/cli
      - name: "Install application"
        run: |
          npm install --ignore-scripts
          cd frontend
          npm install --ignore-scripts
#       - name: "Lint source code"
#         run: npm run lint
#       - name: "Lint customization configs"
#         run: |
#           npm run lint:config -- -f ./config/7ms.yml
#           npm run lint:config -- -f ./config/addo.yml
#           npm run lint:config -- -f ./config/bodgeit.yml
#           npm run lint:config -- -f ./config/ctf.yml
#           npm run lint:config -- -f ./config/default.yml
#           npm run lint:config -- -f ./config/fbctf.yml
#           npm run lint:config -- -f ./config/juicebox.yml
#           npm run lint:config -- -f ./config/mozilla.yml
#           npm run lint:config -- -f ./config/oss.yml
#           npm run lint:config -- -f ./config/quiet.yml
#           npm run lint:config -- -f ./config/tutorial.yml
#           npm run lint:config -- -f ./config/unsafe.yml
          
          
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'    
          others: ''
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports
#   test:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest]
#         node-version: [12]
#     steps:
#       - name: "Check out Git repository"
#         uses: actions/checkout@v2
#       - name: "Use Node.js ${{ matrix.node-version }}"
#         uses: actions/setup-node@v1
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: "Cache Node.js modules"
#         uses: actions/cache@v2
#         with:
#           path: ~/.npm
#           key: ${{ runner.OS }}-node-${{ hashFiles('**/package.json') }}
#           restore-keys: |
#             ${{ runner.OS }}-node-
#             ${{ runner.OS }}-
#       - name: "Install CLI tools"
#         run: npm install -g @angular/cli
#       - name: "Install application"
#         run: npm install
#       - name: "Execute unit tests"
#         uses: nick-invision/retry@v2
#         with:
#           timeout_minutes: 10
#           max_attempts: 3
#           command: npm test
#       - name: "Execute integration tests"
#         uses: nick-invision/retry@v2
#         with:
#           timeout_minutes: 5
#           max_attempts: 3
#           command: |
#             if [ "$RUNNER_OS" == "Windows" ]; then
#             set NODE_ENV=test
#             else
#             export NODE_ENV=test
#             fi
#             npm run frisby
#           shell: bash
#       - name: "Publish coverage to Codeclimate"
#         if: github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.node-version == '14'
#         env:
#           CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
#         run: |
#           curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-0.7.0-linux-amd64 > ./cc-test-reporter
#           chmod +x ./cc-test-reporter
#           sed -i s/SF:/SF:frontend\\//g build/reports/coverage/frontend-tests/lcov.info
#           ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.frontend.json build/reports/coverage/frontend-tests/lcov.info
#           ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.server.json build/reports/coverage/server-tests/lcov.info
#           ./cc-test-reporter format-coverage -t lcov -o build/reports/coverage/codeclimate.api.json build/reports/coverage/api-tests/lcov.info
#           ./cc-test-reporter sum-coverage build/reports/coverage/codeclimate.*.json -p 3
#           ./cc-test-reporter upload-coverage
#         shell: bash


#   smoke:
#     runs-on: ubuntu-latest
#     steps:
#       - name: "Check out Git repository"
#         uses: actions/checkout@v2
#       - name: "Use Node.js 14"
#         uses: actions/setup-node@v1
#         with:
#           node-version: 14
#       - name: "Install CLI tools"
#         run: |
#           npm install -g @angular/cli
#           npm install -g grunt-cli
#       - name: "Set packaging options for Grunt"
#         run: |
#           echo "PCKG_OS_NAME=linux" >> $GITHUB_ENV
#           echo "PCKG_NODE_VERSION=14" >> $GITHUB_ENV
#           echo "PCKG_CPU_ARCH=x64" >> $GITHUB_ENV
#       - name: "Package application"
#         run: |
#           npm install --production
#           npm install -g grunt-cli
#           npm run package:ci
#       - name: "Unpack application archive"
#         run: |
#           cd dist
#           tar -zxf juice-shop-*.tgz
#       - name: "Execute smoke test"
#         run: |
#           cd dist/juice-shop_*
#           npm start &
#           cd ../..
#           chmod +x test/smoke/smoke-test.sh
#           test/smoke/smoke-test.sh http://localhost:3000

